<launch>

    <arg name="conf_file" default="$(find collision_free_vel)/config/config.yaml"/>
    <arg name="ns_prefix" default="uav_"/>
    <arg name="backend" default="light"/>

    
    <!-- Launch Gazebo simulation TODO: world location? -->
    <rosparam param="/use_sim_time">true</rosparam>
    <node pkg="px4_bringup" type="launch_gzworld.py" name="gazebo_world" output="screen"
    args="-physics=ode -world=$(find px4_bringup)/config/empty_light.world"/>

    <!-- Launch robots. Argument mode can be:
        - sitl: for software in the loop simulation
        - serial: for serial connection to px4
        - udp: for udp connection to px4
    -->
    	 <!-- Launch robot id=1 -->
    <node pkg="px4_bringup" type="spawn_gzmodel.py" name="spawn_gzmodel_1" output="screen"
        args="-model=mbzirc -id=1 -material=Orange -backend=$(arg backend) -x 10.0 -y 10.0 -z 0 -Y 0"/>

        <!-- Launch robot id=2 -->
	<node pkg="px4_bringup" type="spawn_gzmodel.py" name="spawn_gzmodel_2" output="screen"
        args="-model=mbzirc -id=2 -material=Indigo -backend=$(arg backend) -x -10 -y 10 -z 0 -Y 0"/>
        <!-- Launch robot id=3 -->
	<node pkg="px4_bringup" type="spawn_gzmodel.py" name="spawn_gzmodel_3" output="screen"
        args="-model=mbzirc -id=3 -material=ZincYellow -backend=$(arg backend) -x 10 -y -10 -z 0 -Y 0"/>
     <!-- Launch robot id=4 -->
    <node pkg="px4_bringup" type="spawn_gzmodel.py" name="spawn_gzmodel_4" output="screen"
        args="-model=mbzirc -id=4 -material=Blue -backend=$(arg backend) -x -10 -y -10 -z 0 -Y 0"/>

	 

 	 <!-- Launch UAL server for drone id=1 -->
    <node pkg="uav_abstraction_layer" type="server" name="ual"  ns="$(arg ns_prefix)1" output="screen">
        <param name="uav_id" value="1"/>
        <param name="backend" value="$(arg backend)"/>
        <param name="pose_frame_id" value="map"/>
        <rosparam param="home_pose">[10.0, 10.0, 0]</rosparam><!-- [x,y,z] -->
    </node>

    <!-- Launch UAL server for drone id=2 -->
    <node pkg="uav_abstraction_layer" type="server" name="ual"  ns="$(arg ns_prefix)2" output="screen">
        <param name="uav_id" value="2"/>
        <param name="backend" value="$(arg backend)"/>
        <param name="pose_frame_id" value="map"/>
        <rosparam param="home_pose">[-10.0, 10.0, 0]</rosparam><!-- [x,y,z] -->
    </node>
    
    <!-- Launch UAL server for drone id=3 -->
    <node pkg="uav_abstraction_layer" type="server" name="ual"  ns="$(arg ns_prefix)3" output="screen">
        <param name="uav_id" value="3"/>
        <param name="backend" value="$(arg backend)"/>
        <param name="pose_frame_id" value="map"/>
        <rosparam param="home_pose">[10.0, -10.0, 0]</rosparam><!-- [x,y,z] -->
    </node>

    <!-- Launch UAL server for drone id=4 -->
    <node pkg="uav_abstraction_layer" type="server" name="ual"  ns="$(arg ns_prefix)4" output="screen">
        <param name="uav_id" value="4"/>
        <param name="backend" value="$(arg backend)"/>
        <param name="pose_frame_id" value="map"/>
        <rosparam param="home_pose">[-10.0, -10, 0]</rosparam><!-- [x,y,z] -->
    </node>

    <!-- Launch collision avoidance algorithm -->
    <!--
    <node pkg="collision_free_vel" type="central_avoidance_node.py" name="central_controller" output="screen">
        <rosparam command="load" file="$(arg conf_file)" />
        <param name="uav_radius" type="double" value="5.0" />
        <param name="n_directions" type="int" value="10" />
        <param name="time_horizon" type="double" value="10" />
        <param name="max_deviation" type="double" value="0.785" />
        <param name="rate" type="double" value="10" />
        <param name="nominal_speed" type="double" value="1.0" />
    </node>
    -->
</launch>
